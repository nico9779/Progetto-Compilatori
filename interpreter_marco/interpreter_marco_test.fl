%option c++
%option noyywrap
%{

/* Deccoment the line below to enable logging. */
//#define PROJECT_LOGGING

#include <stdlib.h>
#include <string.h>

#include "interpreter_marco_test.tab.h"

extern YYSTYPE yylval;

%}

delim                  		[ \t\r\n]
ws                      	{delim}+
letter                  	[A-Za-z]
digit                   	[0-9]

number                  	{digit}+\.?{digit}*

%%

	/* ******************** WHITESPACES ******************** */

{ws}                    	{}     /* eat up whitespaces */

	/* ******************** PUNCTUATORS ******************** */

";"							{
								#ifdef PROJECT_LOGGING
									printf("F<PT_SEMICOLON>\n");
								#endif

								return PT_SEMICOLON;
							}

	/* ******************** KEYWORDS ******************** */

"false"						{
								#ifdef PROJECT_LOGGING
									printf("F<KW_FALSE>\n");
								#endif

								return KW_FALSE;
							}

"print"						{
								#ifdef PROJECT_LOGGING
									printf("F<KW_PRINT>\n");
								#endif

								return KW_PRINT;
							}

"true"						{
								#ifdef PROJECT_LOGGING
									printf("F<KW_TRUE>\n");
								#endif

								return KW_TRUE;
							}

	/* ******************** BRACKETS ******************** */

"("	                    	{
								#ifdef PROJECT_LOGGING
									printf("F<BR_ROUND_OPEN>\n");
								#endif

								return BR_ROUND_OPEN;
							}

")"	                    	{
								#ifdef PROJECT_LOGGING
									printf("F<BR_ROUND_CLOSE>\n");
								#endif

								return BR_ROUND_CLOSE;
							}

	/* ******************** ARITHMETIC OPERATORS ******************** */

"+"	                    	{
								#ifdef PROJECT_LOGGING
									printf("F<OP_ADD>\n");
								#endif

								return OP_ADD;
							}

"-"	                   		{
								#ifdef PROJECT_LOGGING
									printf("F<OP_SUB>\n");
								#endif

								return OP_SUB;
							}

"*"	                    	{
								#ifdef PROJECT_LOGGING
									printf("F<OP_MUL>\n");
								#endif

								return OP_MUL;
							}

"/"	                    	{
								#ifdef PROJECT_LOGGING
									printf("F<OP_DIV>\n");
								#endif

								return OP_DIV;
							}

	/* ******************** ASSIGNMENT OPERATORS ******************** */

"="							{
								#ifdef PROJECT_LOGGING
									printf("F<OP_ASSIGN>\n");
								#endif

								return OP_ASSIGN;
							}

	/* ******************** RELATIONAL OPERATORS ******************** */

"<"	                    	{
								#ifdef PROJECT_LOGGING
									printf("F<OP_LT>\n");
								#endif

								return OP_LT;
							}

"<="	                	{
								#ifdef PROJECT_LOGGING
									printf("F<OP_LE>\n");
								#endif

								return OP_LE;
							}

"=="	            		{
								#ifdef PROJECT_LOGGING
									printf("F<OP_EQ>\n");
								#endif

								return OP_EQ;
							}

"!="	             		{
								#ifdef PROJECT_LOGGING
									printf("F<OP_NE>\n");
								#endif

								return OP_NE;
							}

">"	                    	{
								#ifdef PROJECT_LOGGING
									printf("F<OP_GT>\n");
								#endif

								return OP_GT;
							}

">="	               		{
								#ifdef PROJECT_LOGGING
									printf("F<OP_GE>\n");
								#endif

								return OP_GE;
							}

	/* ******************** LOGICAL OPERATORS ******************** */

"and"	              		{
								#ifdef PROJECT_LOGGING
									printf("F<OP_AND>\n");
								#endif

								return OP_AND;
							}

"or"	              		{
								#ifdef PROJECT_LOGGING
									printf("F<OP_OR>\n");
								#endif

								return OP_OR;
							}

"xor"	            		{
								#ifdef PROJECT_LOGGING
									printf("F<OP_XOR>\n");
								#endif

								return OP_XOR;
							}

"not"	               		{
								#ifdef PROJECT_LOGGING
									printf("F<OP_NOT>\n");
								#endif

								return OP_NOT;
							}

	/* ******************** OTHERS ******************** */

{number}               		{
								sscanf(yytext, "%lf", &yylval.f_val);

								#ifdef PROJECT_LOGGING
									printf("F<NUMBER, %s>\n", yytext);
								#endif

								return NUMBER;
							}

["][^\"]*["]|['][^\']*[']	{
								/* Allocate heap memory to store the string, and put the pointer in yylval. */
								yylval.s_val = (char*) malloc(yyleng - 1);
								memcpy(yylval.s_val, yytext + 1, yyleng - 2);
								yylval.s_val[yyleng - 2] = 0;

								#ifdef PROJECT_LOGGING
									printf("F<STRING, %s>\n", yylval.s_val);
								#endif

								return STRING;
							}


%%