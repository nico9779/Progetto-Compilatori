%option noyywrap

%{

/* Deccoment the line below to enable logging. */
//#define PROJECT_LOGGING

#include <stdio.h>
#include <string.h>
#include "compiler_nicola.tab.h"
%}

delim                   [ \t\n]
ws                      {delim}+
letter                  [A-Za-z]
digit                   [0-9]

id                      {letter}({letter}|{digit})*
number                  {digit}+

%%

{ws}                    {}     /* eat up whitespaces */

if                      { 
							#ifdef PROJECT_LOGGING
								printf("<keyword, IF>\n"); 
							#endif

							return KW_IF; 
						}
else                    { 
							#ifdef PROJECT_LOGGING
								printf("<keyword, ELSE>\n"); 
							#endif
							return KW_ELSE; 
						}
do                      { 
							#ifdef PROJECT_LOGGING
								printf("<keyword, DO>\n"); 
							#endif
						}
while                   { 
							#ifdef PROJECT_LOGGING
								printf("<keyword, WHILE>\n"); 
							#endif
							return KW_WHILE; 
						}
for                     { 
							#ifdef PROJECT_LOGGING
								printf("<keyword, FOR>\n"); 
							#endif
						}
int                     { 
							#ifdef PROJECT_LOGGING
								printf("<keyword, INT>\n"); 
							#endif
							return KW_INT; 
						}
return                  { 
							#ifdef PROJECT_LOGGING
								printf("<keyword, RETURN>\n"); 
							#endif
						}
print					{ 
							#ifdef PROJECT_LOGGING
								printf("<keyword, PRINT>\n"); 
							#endif 
						}
<<EOF>>        			{
							#ifdef PROJECT_LOGGING
								printf("<keyword, ENDFILE>\n"); 
							#endif
							return 0; 
						}

"true"|"TRUE"			{ 
							#ifdef PROJECT_LOGGING
								printf("<keyword, TRUE>\n"); 
							#endif
							return KW_TRUE; 
						}
"false"|"FALSE"			{ 
							#ifdef PROJECT_LOGGING
								printf("<keyword, FALSE>\n"); 
							#endif
							return KW_FALSE; 
						}

"//"[^\n]*              {}   /* eat up one-line comments */
"/*"[^"*/"]*"*/"        {}   /* eat up multi-line comments */

["][^\"]*["]            { 
							#ifdef PROJECT_LOGGING
								printf("<string, %s>\n", yytext);  
							#endif
						}     										/* strings delimited by ""  */
['][^\']*[']            { 
							#ifdef PROJECT_LOGGING
								printf("<string, %s>\n", yytext);
							#endif 
						}     										/* strings delimited by ''  */

"<"                     { 
							#ifdef PROJECT_LOGGING
								printf("<operator, LT>\n"); 
							#endif
							return OP_LT; 
						}
"<="                    { 	
							#ifdef PROJECT_LOGGING
								printf("<operator, LE>\n"); 
							#endif
							return OP_LE; 
						}
"=="                    { 
							#ifdef PROJECT_LOGGING
								printf("<operator, EQ>\n"); 
							#endif
							return OP_EQ; 
						}
"!="                    { 
							#ifdef PROJECT_LOGGING
								printf("<operator, NEQ>\n"); 
							#endif
							return OP_NEQ; 
						}
">"                     { 
							#ifdef PROJECT_LOGGING
								printf("<operator, GT>\n"); 
							#endif
							return OP_GT; 
						}
">="                    { 
							#ifdef PROJECT_LOGGING
								printf("<operator, GE>\n"); 
							#endif
							return OP_GE; 
						}

"+"	                    { 
							#ifdef PROJECT_LOGGING
								printf("<operator, ADDITION>\n"); 
							#endif
							return OP_ADD;
						}
"-"	                    { 
							#ifdef PROJECT_LOGGING
								printf("<operator, SUBTRACTION>\n"); 
							#endif
							return OP_SUB;
						}
"*"	                    { 
							#ifdef PROJECT_LOGGING
								printf("<operator, MULTIPLICATION>\n"); 
							#endif
							return OP_MUL;
						}
"/"	                    { 
							#ifdef PROJECT_LOGGING
								printf("<operator, DIVISION>\n"); 
							#endif
							return OP_DIV;
						}
"%"                     { 
							#ifdef PROJECT_LOGGING
								printf("<operator, MODULO>\n"); 
							#endif
						}

"="                     { 
							#ifdef PROJECT_LOGGING
								printf("<operator, ASSIGNMENT>\n"); 
							#endif
							return OP_ASSIGN; 
						}

"and"|"AND"             { 
							#ifdef PROJECT_LOGGING
								printf("<operator, AND>\n"); 
							#endif
							return OP_AND; 
						}
"or"|"OR"               { 
							#ifdef PROJECT_LOGGING
								printf("<operator, OR>\n"); 
							#endif
							return OP_OR; 
						}
"not"|"NOT"             { 
							#ifdef PROJECT_LOGGING
								printf("<operator, NOT>\n"); 
							#endif
							return OP_NOT; 
						}
"xor"|"XOR"				{ 
							#ifdef PROJECT_LOGGING
								printf("<operator, XOR>\n"); 
							#endif
							return OP_XOR; 
						}

"&"					    { 
							#ifdef PROJECT_LOGGING
								printf("<operator, BITWISE AND>\n"); 
							#endif
						}
"|"					    { 
							#ifdef PROJECT_LOGGING
								printf("<operator, BITWISE OR>\n"); 
							#endif
						}
"^"					    { 
							#ifdef PROJECT_LOGGING
								printf("<operator, BITWISE XOR>\n"); 
							#endif
						}
"~"                     { 
							#ifdef PROJECT_LOGGING
								printf("<operator, UNARY COMPLEMENT>\n"); 
							#endif
						}
"<<"                    { 
							#ifdef PROJECT_LOGGING
								printf("<operator, SHIFT LEFT>\n"); 
							#endif
						}
">>"                    { 
							#ifdef PROJECT_LOGGING
								printf("<operator, SHIFT RIGHT>\n"); 
							#endif
						}

"("	                    { 
							#ifdef PROJECT_LOGGING
								printf("<bracket, OPEN ROUND BRACKET>\n"); 
							#endif
							return BR_ROUND_OPEN;
						}
")"	                    { 
							#ifdef PROJECT_LOGGING
								printf("<bracket, CLOSE ROUND BRACKET>\n"); 
							#endif
							return BR_ROUND_CLOSE;
						}
"{"	                    { 
							#ifdef PROJECT_LOGGING
								printf("<bracket, OPEN CURLY BRACKET>\n"); 
							#endif
							return BR_CURLY_OPEN;
						}
"}"	                    { 
							#ifdef PROJECT_LOGGING
								printf("<bracket, CLOSE CURLY BRACKET>\n"); 
							#endif
							return BR_CURLY_CLOSE;
						}

";"	                    { 
							#ifdef PROJECT_LOGGING
								printf("<semicolon, >\n"); 
							#endif
							return SEMICOLON;
						}
","                     { 
							#ifdef PROJECT_LOGGING
								printf("<comma, >\n"); 
							#endif
							return COMMA; 
						}
":"                     { 
							#ifdef PROJECT_LOGGING
								printf("<colon, >\n"); 
							#endif
						}

{id}                    { 
							yylval.address.addr = strdup(yytext);
							#ifdef PROJECT_LOGGING
								printf("<id, %s>\n", yytext); 
							#endif
							return ID;
						}
{number}                {
							yylval.address.addr = strdup(yytext);
							#ifdef PROJECT_LOGGING
								printf("<number, %s>\n", yytext); 
							#endif
						    return NUMBER;
						}
.                       { 
							#ifdef PROJECT_LOGGING
								printf("<unrecognized, %s>\n", yytext); 
							#endif
							return yytext[0];
						}

%%
