%option noyywrap
%{

#include <stdlib.h>
#include <string.h>

#include "new_compiler_marco.tab.h"

extern YYSTYPE yylval;

%}

delim                  		[ \t\r\n]
ws                      	{delim}+
letter                  	[A-Za-z]
digit                   	[0-9]

id							{letter}({letter}|{digit})*
number						{digit}+

%%

	/* ******************** WHITESPACES ******************** */

{ws}                    	{}		/* eat up whitespaces */

	/* ******************** PUNCTUATORS ******************** */

","							{ return pt_comma; }
";"							{ return pt_semicolon; }

	/* ******************** KEYWORDS ******************** */

"do"						{ return kw_do; }
"else"						{ return kw_else; }
"false"						{ return kw_false; }
"for"						{ return kw_for; }
"if"						{ return kw_if; }
"int"						{ return kw_int; }
"print"						{ return kw_print; }
"true"						{ return kw_true; }
"while"						{ return kw_while; }

	/* ******************** BRACKETS ******************** */

"("							{ return br_round_open; }
")"							{ return br_round_close; }
"{"							{ return br_curly_open; }
"}"							{ return br_curly_close; }

	/* ******************** ARITHMETIC OPERATORS ******************** */

"+"							{ return op_add; }
"-"							{ return op_sub; }
"*"							{ return op_mul; }
"/"							{ return op_div; }
"%"							{ return op_mod; }

	/* ******************** ASSIGNMENT OPERATORS ******************** */

"="							{ return op_assign; }

	/* ******************** RELATIONAL OPERATORS ******************** */

"=="						{ return op_eq; }
"!="						{ return op_ne; }
"<"							{ return op_lt; }
"<="						{ return op_le; }
">"							{ return op_gt; }
">="						{ return op_ge; }

	/* ******************** LOGICAL OPERATORS ******************** */

"and"						{ return op_and; }
"or"						{ return op_or; }
"xor"						{ return op_xor; }
"not"						{ return op_not; }

	/* ******************** OTHERS ******************** */

{id}						{
								yylval.address.addr = strdup(yytext);							
								return id;
							}

{number}         			{
								yylval.address.addr = strdup(yytext);
								return int_number;
							}

["][^\"]*["]|['][^\']*[']	{
								/* Allocate heap memory to store the string, and put the pointer in yylval. */
								yylval.address.addr = (char*) malloc(yyleng - 1);
								memcpy(yylval.address.addr, yytext + 1, yyleng - 2);
								yylval.address.addr[yyleng - 2] = 0;

								return string;
							}


%%